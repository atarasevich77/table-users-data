{"version":3,"sources":["EditData/EditData.js","App.js","serviceWorker.js","index.js"],"names":["EditData","props","useState","data","setData","editMode","setEditMode","isValidData","setIsValidData","value","onChange","e","target","length","className","onClick","preventDefault","handleData","id","key","disabled","App","users","setUsers","onSaveUser","map","user","axios","method","url","then","response","catch","error","console","log","Table","striped","bordered","hover","el","name","username","email","address","phone","website","company","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4058e9dc.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst EditData = (props) => {\r\n    const [data, setData] = useState(props.data['value']);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [isValidData, setIsValidData] = useState(false);\r\n\r\n    const handleChange = (e) => {\r\n        setData(e.target.value);\r\n        setIsValidData(data.length > 0);\r\n    }\r\n\r\n    const handleSave = (e) => {\r\n        e.preventDefault();\r\n        props.handleData({id: props.data['id'], key: props.data['key'], value: data});\r\n        setEditMode(false);\r\n    }\r\n\r\n    const handleCancel = (e) => {\r\n        e.preventDefault();\r\n        setData(data);\r\n        setEditMode(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode ?\r\n                <div>\r\n                    <div>\r\n                        <input value={data} onChange={handleChange}/>\r\n                    </div>\r\n\r\n                    <button className=\"btn btn-success btn-sm m-1\" onClick={handleSave} disabled={isValidData}>Save</button>\r\n                    <button className=\"btn btn-secondary btn-sm m-1\" onClick={handleCancel}>Cancel</button>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <div>\r\n                        {data}\r\n                        <button className=\"btn btn-outline-primary btn-sm m-1\" onClick={() => setEditMode(true)}>Edit</button>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditData;","import React, { useState } from 'react';\r\nimport axios from \"axios\";\r\nimport {Table} from \"react-bootstrap\";\r\nimport EditData from \"./EditData/EditData\";\r\n\r\nfunction App() {\r\n\r\n    const [users, setUsers] = useState([]);\r\n    const title = ['#','Name','User Name', 'Email', 'Address', 'Phone', 'Website', 'Company'];\r\n\r\n    const addUsers = () => {\r\n\r\n        // fetch(apiUrl)\r\n        //     .then(response => response.json())\r\n        //     .then(json => setUsers(json))\r\n\r\n        axios({\r\n            method: 'get',\r\n            url: 'https://cors-anywhere.herokuapp.com/https://jsonplaceholder.typicode.com/users'\r\n        })\r\n            .then((response) => {\r\n                setUsers(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    const onSaveUser = (data) => {\r\n        users.map(user => {\r\n            if(user.id === data['id']){\r\n                user[data['key']] = data['value'];\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-md-center\">\r\n                <h1 className=\"display-5\">Users</h1>\r\n            </div>\r\n            <div className=\"row p-2\">\r\n                <button className=\"btn btn-primary btn-sm ml-auto m-1\" onClick={addUsers}>Add Users</button>\r\n                <button className=\"btn btn-secondary btn-sm m-1\" onClick={() => setUsers([])}>Clear Table</button>\r\n            </div>\r\n            <div className=\"row-md\">\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                    <tr>\r\n                        {title.map(el => <th key={el}>{el}</th>)}\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        users.map(user =>\r\n                            <tr key={user.id}>\r\n                                <td>{user.id}</td>\r\n                                <td><EditData data={{id: user.id, key: 'name', value: user.name}} handleData={onSaveUser}/></td>\r\n                                <td><EditData data={{id: user.id, key: 'username', value: user.username}} handleData={onSaveUser}/></td>\r\n                                <td><EditData data={{id: user.id, key: 'email', value: user.email}} handleData={onSaveUser}/></td>\r\n                                <td>\r\n                                    <div>street: {user.address['street']}</div>\r\n                                    <div>suite: {user.address['suite']}</div>\r\n                                    <div>city: {user.address['city']}</div>\r\n                                    <div>zipcode: {user.address['zipcode']}</div>\r\n                                    <div>geo:\r\n                                        <div>lat:{user.address['geo']['lat']}</div>\r\n                                        <div>lng:{user.address['geo']['lng']}</div>\r\n                                    </div>\r\n                                </td>\r\n                                <td><EditData data={{id: user.id, key: 'phone', value: user.phone}} handleData={onSaveUser}/></td>\r\n                                <td><EditData data={{id: user.id, key: 'website', value: user.website}} handleData={onSaveUser}/></td>\r\n                                <td>\r\n                                    <div>name: {user.company['name']}</div>\r\n                                    <div>catch Phrase: {user.company['catchPhrase']}</div>\r\n                                    <div>bs: {user.company['bs']}</div>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}